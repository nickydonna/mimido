
// This file was generated by [tauri-specta](https://github.com/oscartbeaumont/tauri-specta). Do not edit this file manually.

/** user-defined commands **/


export const commands = {
async createServer(serverUrl: string, user: string, password: string) : Promise<Result<Server, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("create_server", { serverUrl, user, password }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async listServers() : Promise<Server[]> {
    return await TAURI_INVOKE("list_servers");
},
async listCalendars() : Promise<Result<Calendar[], string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("list_calendars") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async fetchCalendars(serverId: number) : Promise<Result<Calendar[], string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("fetch_calendars", { serverId }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async syncCalendar(calendarId: number) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("sync_calendar", { calendarId }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async syncAllCalendars() : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("sync_all_calendars") };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async listEventsForDay(datetime: string) : Promise<Result<ExtendedEvent[], string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("list_events_for_day", { datetime }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async parseEvent(dateOfInputStr: string, componentInput: string) : Promise<Result<DisplayUpsertInfo, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("parse_event", { dateOfInputStr, componentInput }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
},
async saveEvent(calendarId: number, dateOfInputStr: string, componentInput: string) : Promise<Result<null, string>> {
    try {
    return { status: "ok", data: await TAURI_INVOKE("save_event", { calendarId, dateOfInputStr, componentInput }) };
} catch (e) {
    if(e instanceof Error) throw e;
    else return { status: "error", error: e  as any };
}
}
}

/** user-defined events **/



/** user-defined constants **/



/** user-defined types **/

export type Calendar = { id: number; name: string; url: string; etag: string | null; server_id: number; default_value: boolean }
/**
 * Simplified version of a [`EventUpsertInfo`] for showing to the user while creating
 */
export type DisplayUpsertInfo = { summary: string; starts_at: string | null; ends_at: string | null; recurrence: string | null; status: EventStatus; event_type: EventType; postponed: number; urgency: number; load: number; importance: number }
export type EventStatus = "Backlog" | "Todo" | "InProgress" | "Done"
export type EventType = "Event" | "Block" | "Reminder" | "Task"
export type ExtendedEvent = { event: VEvent; 
/**
 * The start date of the event, if recurrent the value for the current query
 */
starts_at: string; 
/**
 * The end date of the event, if recurrent the value for the current query
 */
ends_at: string; natural_recurrence: string | null }
export type Server = { id: number; server_url: string; user: string; password: string; last_sync: string | null }
export type VEvent = { id: number; calendar_id: number; uid: string; href: string; ical_data: string; summary: string; description: string | null; starts_at: string; ends_at: string; has_rrule: boolean; rrule_str: string | null; tag: string | null; status: EventStatus; event_type: EventType; original_text: string | null; load: number; urgency: number; importance: number; postponed: number; last_modified: string }

/** tauri-specta globals **/

import {
	invoke as TAURI_INVOKE,
	Channel as TAURI_CHANNEL,
} from "@tauri-apps/api/core";
import * as TAURI_API_EVENT from "@tauri-apps/api/event";
import { type WebviewWindow as __WebviewWindow__ } from "@tauri-apps/api/webviewWindow";

type __EventObj__<T> = {
	listen: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.listen<T>>;
	once: (
		cb: TAURI_API_EVENT.EventCallback<T>,
	) => ReturnType<typeof TAURI_API_EVENT.once<T>>;
	emit: null extends T
		? (payload?: T) => ReturnType<typeof TAURI_API_EVENT.emit>
		: (payload: T) => ReturnType<typeof TAURI_API_EVENT.emit>;
};

export type Result<T, E> =
	| { status: "ok"; data: T }
	| { status: "error"; error: E };

function __makeEvents__<T extends Record<string, any>>(
	mappings: Record<keyof T, string>,
) {
	return new Proxy(
		{} as unknown as {
			[K in keyof T]: __EventObj__<T[K]> & {
				(handle: __WebviewWindow__): __EventObj__<T[K]>;
			};
		},
		{
			get: (_, event) => {
				const name = mappings[event as keyof T];

				return new Proxy((() => {}) as any, {
					apply: (_, __, [window]: [__WebviewWindow__]) => ({
						listen: (arg: any) => window.listen(name, arg),
						once: (arg: any) => window.once(name, arg),
						emit: (arg: any) => window.emit(name, arg),
					}),
					get: (_, command: keyof __EventObj__<any>) => {
						switch (command) {
							case "listen":
								return (arg: any) => TAURI_API_EVENT.listen(name, arg);
							case "once":
								return (arg: any) => TAURI_API_EVENT.once(name, arg);
							case "emit":
								return (arg: any) => TAURI_API_EVENT.emit(name, arg);
						}
					},
				});
			},
		},
	);
}
